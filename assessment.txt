1.Django signals are executed synchronously. 

eg:
from django.db import models
from django.dispatch import receiver
from django.db.models.signals import post_save
class MyModel(models.Model):
    name = models.CharField(max_length=100)

@receiver(post_save, sender=MyModel)
def model_post_save():
    print('Signal is called')

MyModel.objects.create(name='Test Instance')


When we create the mymodel instance the post_save signal is called and 
prints the output

2.Django signals run in the same thread as the caller by default. When a signal is triggered,
 the receiver function executes in the same place that initiated the signal.

eg:
from django.db import models
from django.dispatch import receiver
from django.db.models.signals import pre_delete
class User(models.Model):
    name = models.CharField(max_length=100)

@receiver(pre_delete, sender=MyModel)
def model_pre_delete():
    print('User is going to be deleted')

user_to_delete=User.objects.filter(name='Testuser')

user_to_delete.delete()

When we delete the User instance the pre_delete signal is called and 
prints the output

3.Django signals run in the same database transaction as the caller. 
if the signal is triggered during a transaction, any changes made by the signal will be part of that transaction.

eg:

from django.db import models
from django.dispatch import receiver
from django.db.models.signals import post_save

class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)

@receiver(post_save, sender=Product)
def product_save(sender, instance):
    if created:
        print('Product Created')

product = Product.objects.create(name='Gadget', price=29.99)

When the product is created it will print the message since the signal is part of the transaction.

Custom class
1.
class Rectangle:
    def __init__(self, length: int, width: int):
        self.length = length
        self.width = width

    def __iter__(self):
        yield {'length': self.length}
        yield {'width': self.width}

rectangle = Rectangle(10, 5)

for dimension in rectangle:
    print(dimension)

